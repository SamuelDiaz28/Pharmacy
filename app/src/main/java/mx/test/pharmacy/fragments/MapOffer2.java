package mx.test.pharmacy.fragments;

import android.Manifest;
import android.content.Context;
import android.content.pm.PackageManager;
import android.graphics.Bitmap;
import android.graphics.Typeface;
import android.graphics.drawable.BitmapDrawable;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.core.app.ActivityCompat;
import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentTransaction;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.MapView;
import com.google.android.gms.maps.OnMapReadyCallback;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.CameraPosition;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.material.bottomsheet.BottomSheetDialog;
import com.google.android.material.floatingactionbutton.FloatingActionButton;

import java.util.ArrayList;
import java.util.List;

import mx.test.pharmacy.R;
import mx.test.pharmacy.adapters.ListFarmaciaPrecDistAdapter;
import mx.test.pharmacy.models.Imagenes;
import mx.test.pharmacy.models.ListCompraUsuario;
import mx.test.pharmacy.models.ListFarmaciaPrecDist;
import mx.test.pharmacy.models.ListMedicamentoShow;
import mx.test.pharmacy.util.ComunMethod;

/**
 * A simple {@link Fragment} subclass.
 * Use the {@link MapOffer2#newInstance} factory method to
 * create an instance of this fragment.
 */
public class MapOffer2 extends Fragment implements OnMapReadyCallback, View.OnClickListener , LocationListener {
    //MAPAS
    public String pirquet ="/9j/4AAQSkZJRgABAQEAYABgAAD//gA7Q1JFQVRPUjogZ2QtanBlZyB2MS4wICh1c2luZyBJSkcgSlBFRyB2NjIpLCBxdWFsaXR5ID0gODAK/9sAQwAGBAUGBQQGBgUGBwcGCAoQCgoJCQoUDg8MEBcUGBgXFBYWGh0lHxobIxwWFiAsICMmJykqKRkfLTAtKDAlKCko/9sAQwEHBwcKCAoTCgoTKBoWGigoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgo/8IAEQgBCQEJAwEiAAIRAQMRAf/EABsAAQABBQEAAAAAAAAAAAAAAAAGAQIDBQcE/8QAGQEBAAMBAQAAAAAAAAAAAAAAAAECAwQF/9oADAMBAAIQAxAAAAHqgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIboPHNO7KL0k+eJh+XSzHSuh8sMs3pNaQqkJohaEzQu2JmNYahM0PyQlmWJ56zKa6jXQlCNeQmFkWy3iVXaLL0ZzHoHKerebuHNqBx+eQOedefFZlLfVeI56oF1url0vjkkvERk0dlx69LAuyUtzpsWlY5I9NMImIdAyaDG3uhPS4rCdwOU8YtHu81lvZjn9XluidnstD6t85h0jlXVeDoDi1A5FOYNsu7KHam/H3Yu6cK6Vy30u4ivvTgm/Iuhwi/VNPuMLwn2wXo2tdLuNZ4qWmGngfQ4aXwS7m9o7HxvpMepMVsyunLFbn8F49nr1eXak86pyfrHn9AceoHIYXNIZ7HLbS63WqgVU9EPPSV3ZXjfV4D5M7aVJ77xEqSLJExi6Xa00d0w10NPn3GWjS2MdoeX2eTStL7a3iZdm432Tztw5tAOQwqaQr1+WqjatK0qUrSkMns19Yn2Zt9t+Pmh6ZXZ1iqWViY55ZZ64mBWTZMQvzyuFa9GDLXJre/x+2w8C6zaJr2TjPZvO3Dm0A49C5pC/X5ajataUoVKQFSYbrm+Xk5+jXc8y51n10DuiZrlgmOE5y89sms4gdWvVWVRzpHPzePybq3i5eTY9lrfb9SX9q412Xg6Q57gcc1O28fp8+k9W5rZoWy2Rq/BJ/FDS2z2NmmwSLDKLrqa0orQpRSJVpSJyZPPfEZpxAmPP1fPDY5xZY8FtfT7Zr2bjHZ+DcOe4HGorKo76vLhx7nDeNXTd1hocm08sUwWej0Rlra+66Gvt2N031jZ5La6em6xmpt32nicLGlWlaTKi2JuURM27RxXtXDoHPcDjei3kT9XmkTR22SDLGc8Ntnjl8t35tZWKe2/W5Ir7WvyQ2lmux313ldHSJ9mtzDFdeifL5/V5LRSkl82dtHTfa8k3beI9u49AwsBxmOSaNeryX0uxzGfDipW3rpgS9Hlyeea+alK3sq3BqKyO2EeslFUxRKNdWdPT0+aZpbW2J6TsodtuW0h5ZLo1aN/2zifbMLBhcDl8Z7s3pwp3VMcSt7eTxSztyHEru1jid3ahxXJ2ZLjF/ZCONWdoJ4s7ShxV2ocTt7cTxGzuKHD7+2jm3STOQrIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH//xAAtEAABAwMCBgIBBAMBAAAAAAAEAQIDAAUGETUSExQVFiAQITAkJTM0IjFwMv/aAAgBAQABBQL/AKdebs8GfyOavJJq8jmpcjnryArgdkhGnkRleRmUuSGV5GbXkZteRm15Ibp5EfSZCdXkJ1eQnV5AdTb8atd9Nrvhtd8Nrvhld9MrvptJeTlpbwbVjuZJRvrle5WyNi2/qwKYgZbb2A0Kcg8JbZ+NG1w1BG6SQy3ziNgjfLJOx8Lv90lNbTWpSs+sdYrbl65Vudr26T/3jEUilZUqcme0htCsQ0RRslggcTeg44DgsfjRnZrfV0sosIePBwlzZEHCJLZIIybhkNvGEGs1tcc5tnBYhVihcwJix3IuCEiO6sgt8hMziJKbTaZUb9Ksztbl65Xudr25loDa4gsYGO4muNJI27GNyyYiWGDHGcy55KU+AYVy9VedrxL+xl38+Nbtln9LH2Iy1H2o0om0DzjQHtRuQ37atftfhv8ArXSmPprqsC63X1yrcrXt05hDnKtJRG3YzuWW/wAeOypHc8hCeWMGAUpN52vE1/VZUNLK7HbeQwzLf6WNzJLbLgRdR523C7OqKeWa7XmN01tdE6P44aT6p1NWmrWP/dx9cr3IK9DQiPXV3xLfBniWYtgZd9uMRzWqrVDyHRnfx3PvO1glPDJbkY3DLkarNfrrAcNbzpQZYckHVHZGIlST8wuDIIVjvZ8RtafC0q0i0133ja63H1yzcvfT4GVEIuxoz7dSoqezaRflV9cWX929cr3L2g/nu82r+hGaLbQ4iohYoXtYPGy5ppcbiUMO0gsYZIg7fFKOLDCgsrEdfgYYVFeG1LlcRooY6Vda4fTFU/dPXLNy9kXhV71kehc6QxTztbE8mOXQt5EI5bJZBj5pVDPdUcV0jjHgPGpYzepZGQyJ007ZySZZ0+1pqfCp84runrlm5fhtTP0/FKq6k6cROvGVXGVwtlnVZElZSum416nU+PiHX54V+F+MV3X1yzdPw2p+ozealN5+q9Qq6E66E1yyeNeopWz8bOcjrm9EHVNa4daDFZG1JmUWHFPC9NFrF1f3X1yzc/wo5UpJnpSFSpSHTpXcSa7mVXciaW4ELXWTLXUy1zFctQKiywa9IrFWhInxz3BNCaxTdPXLN0tgHWVELNLK23kOJcI5o8oJENdsctx6Kd8sIJMzFGXp5AiY3kjTDL+BF+EXRRS1fGxhLknl6Med/MkrE919cr3SM9o47jR+fCfC2VCR2CGHivGZcx+plPY6rZpJDCfFFFGSMPcCZxXwLpr+BFpVpr1asF2cg5BEk7vjE919cq3Vv2r9UVV0rWtfripNa/yr7rRa0X44kriSta1StUrVK1StUrVPfE919cq3WCSRrlKfSlu5SGyInXrTTOFGTPaiTfXOetcx/EhL0rmvqKflskM4l66nmMcsRaMb17dCJEll/Bie6+uU7qI6VX8ZC1+oWJ0pLEa8qo5pdEkJRJHT8xqEU/nNekc6I7nxubz3JEszK50qvfNLwtfJocySSunmWummrpJ6kjfH7Ylu3rlW6skdGqkyrXUSUpEqtQudKQiRqoTLp1EvE0mVjupk164inFTOchsyNcbOrupl1cVK6mlzMV5kz06ybijNmjd1s/FNPJN8W61qaPFbpHkLbnqQXByJMT3b1yrdWM1SQaaNvSzLQwb50cNK2VAyFpBZnUgsqtljdG782Nuay3TyNFltwSBnFxckrE929cp3Vkisp5Er2rPLUc0sSoRNqwqZtdTNSFTIkkjnr8hvGbGxbdxw9vSBVttL2vVe2cEKCaT8HN+bfM5oPWSqyQ2Z0lykdMVim7euQ28wm4dnuNdnuNdmuFR2Q11OsJtePl0tgM18fMrx8zXx4yvHi68fMrx4vTx4yvHTK8dM08dNrxw6vHDq8cOrxw6vGzq8cPrxw+lx0+vHT6THD6stoJAO/wC4/wD/xAArEQACAQIDCAEEAwAAAAAAAAAAARECEgMQMQQTFCAhIjJRQVBSYWKh0fD/2gAIAQMBAT8B+qdWyH7FPyy9lzLmXMuZcyWSy5jbHXUYTmnrnT5MVEdWKKmymLZYo8hRUiO0S7RKENFbgnJmF45pxUxsw3An2lLUQxJJdClqIOkQJ9BlUPNmFpnXryWlPREEEEEcmHpnXrySVbVa4g4z8M4xemLa5UpM4z8Mw8XeUzlrlh6Z168tWzKpzJwv7HCL7mcIvuYtkj5MOixG1VObKTC3lNS/opcpMo0zcXdSEQiKS1ELmx8DerWGYWA17/3oiCjTOvyLUWorlLtHVWvgvr+F/JQ58i1FqIRHJRpnV5EkkldNNfkbnD9G4w/Rp0J5qc633dSaTtIpHHxnBHKyjTN0Jm7pN2ixFiLEWI3aLEWIsRaWlolH1X//xAApEQACAQIFAwQCAwAAAAAAAAABAgADEQQQEhMUITJRICIzUjFiQVBh/9oACAECAQE/Af7T2U6YJW83EH5pxtuwKre82afibSeJtJ4m0nibaeJoTxCqeIEQi4m2viKifyIlGmf4mLQI9hnV+FY+I1jQojhqSqJVL7ulTKhe4pAxg9Nh7pqO/aOx3QI76mIvaIx6rMOl+t4Bkkx3yZuhaitoABMSha1oyNvBpWptqDpKjMzrqEqqwqa1E0uagZhGpMrXAvFUn8raUtS+20BgizHfJnQ+Mejc6XMqKHa/ia5rE1ia+l4WEAi5YvvzofGPRYR8UisV0zmD6zmfrOWPrOUv1lNw/UCEwHLFd+dD4x6XwasdV5wR9pwv2nC/acIfaJT2+gmJcj2xWKm4lNtSgzE9+aatsaYWfxNTwNUm4xM1tf1VqO4ImFYmxgFhaYrvzp9gy6+Ib+J7vE6+ID6LejE9+dMXpiaZomiaJom3NM0TrOuWsS95iO7OmPYJYy2QyPSav8hf/JqyMZfdeIDfrMR3ZriHUWE5VScmpOQ85LzkPOS85VScl5yXnJech5vtOQ0dy5uf7X//xABAEAACAQICBQgIBAUDBQAAAAABAgADERIhBBMiMTIgM0FRcXKRkhAjMEJDYXOCYoGhsRQ0UsHwcMLRJFODouH/2gAIAQEABj8C/wBTlpoitcXznNJOZSc0kyp05iNBMPXYzKnTE+H5ZupeWbqXhN1LyzdS8s+H5ZupeWcSeWcSeWb08s4k8s408s418s418s418s418s418onGPKJxjyic4vlE5xfKIaVdgVw33cpfpiaPdF4B0TnKMOAUag6bCK1Pmn6OqMA6WKWCdPtlReJjYQNWWwPzmCmLmYXFj6c/SD+E8odwTR+4I3bGqZ6sLYygvTijuKW0EvxHqhSsuJcJMBUlKNuEb7xKOirvUZXvnAdKYs39K7pbV/8AsZVrU8YZRffKo0hcQC5ZykKC4QRnnEp1hiQ3ylN9Hp4WLW3wknDTXeZtKT8y0J0YlG6icpRVhZhUAPjMOkC6jPfKL6IozvfavMRFuUvYeUO4Jo/cEvqsR+ZlmZVtuRZjbJdyjqlT6R/aHuGUlpMVx3vaKWzwgtESmSpqHMiUszxCaR3ZX7sod2U+w/tKXf8A7Sj+LMx6hqJa+QvuEanpDBs9mxlO3SymV/y/f2C908pe4Jo/cEYNWqEd701PpH9oe4Zo/aYl/eGGKaQu6HdKfqKmTDeJpHdlYfglGpTRmAFjYRa9SmUQA8Upd/8AtEX3qeyY2G7Ur7JCXmQc/wDjlFtIPrMYBlZEF26ptKR2jlqfkeUv0xKVNlqYlW26H0vTC1MRTDumsq3w4bZSkKIcYb3xQEZEQLpVMk/1LFWnTqEk2zmkd2LWp7x0dc2qdUN1RNXTw0r7V95ERKIe4a+0JjpHtU7jPW0qin5ZzJKp/KPWXK74hBrkcP02lHUhtm98XLHdPKX6Y9lSJ3YhK6pXpsxXIBvRn7cdw8pfpjl0+8JXT+Kdtvm8OW+KalQB2p474+nsjlsYNPaa3vDq7ZpFaoraunuQHrM0LADq6uF8LdGcfWs4popO0/8AeaOtF7h+IBsVs+uaTqBUDUHw7Rvii60YajqWU6z/AGx69dXcBggVTaFRdRh6O5K1aurthYABTaCigZkNmte2Vr75RqUTk98sWLdywfwHlL9Mcu43iM7G7MbmarHsbrWirSYgK2IW641Snkzb8t8Fc3NQbjNZTDB+uLUZNpd1ltKt0b1pu2W+BFDBRkMo2rUgNvFrw1yDreuNTwnCxuRBWuRUHTFFVrhdwtbl/YeUv0x7LEqg1C2EXmwVfsWXw5d0Tdb7Z8u7L/7Y4LWK9azaqZC99iBVKtcXGyJmE8Fjmooxr0jkbjyB3Dyh9MeywoRrFbFYzZpKOmDYmVKwve3+ds5v/P8ABOZ7ct8ZtUbn5TmcukW3zFq+jDabVPZO/wALR7jDitZewekPWFz1TmUtDV0fIjessfQuC3Cb36uUPpj2WU3zinGZzjeM51vGc63jOcPjOMzNpn6F7ZUsL3IAmAUVBt4SzDZYERrej7DyvsEcs+ADIHrbqj06dMs67xNQUw1CMVjC5DYxU1douupsisbXj6MpZlTewWVEp0nJTflnMdOizL1ylUGIs7FbWiK9Fwz8I64BXpsl91/aDC9iOiYgTn84TVqYqpFh8oW9H2HlfYJQSgqsV2mxj3ppNVcQNaja1vemiFsVkpFGygo7TgaRj3b1mrpf9wNwYcppmLm6xBDFb/pNOOMlqqqFIFrzRK740FFSPwmaH0tSqlmHyi11rVKqNivdc1vNH0UVnZFYs1QruhsfZ3U2MKE2boMu7en7DyvsEyWZpOEThEvhnCJkl5zc5uc3ObnBOEThE4ROEThE4ZwicM4eX9h5X2CbK4srflGD0h1RaZp7rQXp36bzmhOb6zAMNz+8sVmdPfC2rOZE5vtgOq6JhFE5dcB1QuJlS7DE9QAB+sA1QJE5gXhcLh+XsfsPKPcEOqUNl+kKmmmYtvgTVrbLphY01sfnOZU3+c1SUlJTLfD6gb/6ovqQTYgZywpg4fnFuguxtvjep4iTvgXVf/bQEUct4zh/6frO+Jehdg3jP5e3u3mL+Gz7YGNEpYZw2ptlDsG4nNtNtSvbyh3DyvsEuhImbtONphLkiD1hhIY3M4zLlzeXDm8Uk3wm+YnOfpAzNcgECIoICr0WmLFb8oDfMEnxnF033S6v+kIZsjlujEEbRvuhNwb7wRvhOK1/lPWG/wCXoeotULhOGxErUqjCnqRd2PRNVTdX9XrMQ3WmEOHyvlB3Tyj3BG2sOHLdGJts757niJxqLNhI6sif7R02ThYr4ThXxEyC/pL7P6Qo4F9/t9Keo2FVdSTP4xqbFdIuKoyIw9B/aVCt3pVLBD1DfKtP+liIvdPKPcEOBrXhUuLHfOcl0e2eKMcYuTc3nGD2zjAlsY/SXci9rZchxpCXb3TKuIPgvs9kGsxmpbPxhsKnynxLWMPHe8GtLXv0Q6rg6OQ9AVaCpU4g4ziLrdDKquC1uiU71aF6ZxLaGo+rxMM8EXunlazR6JdMIF7ifyp8wn8q3mH/ADP5VvMP+ZtUWXwnN3m6ZJf5zhm4TomVvznuz3bz3PGfD8Z8Pxnw/GfD80+H5p8PzT4fmnw/NN1PzTdT804E804U803U/NFq1cJW1tk/65f/xAApEAEAAgIABAYCAwEBAAAAAAABABEhMUFRYfAQIHGBkcGh0bHh8TBw/9oACAEBAAE/If8A07M+H7pm4fvP9Jjw/wAso4D6MCFk6SNy/nS/ceT3esf7R+4kwXv/AHDvH3HuH3Htv3NTLzt+48h9sy7+HMX1pb+lMv0ZfX8OZfrz/Kz/ABvhwWxDuz+JpZQyVa4gURx5li5fyMWErkRymWsvoQJFcA1LheAuI2ROCp9GsFRlx8j4kpicZRIIVg9RheF0UGErBPmcIPEx5grDg4RXIju0n5u9dZ2rlPykI4EJwXlLU3T7VEHDS8T3TQWZaZxDaHNLXqYhnrApYua7Sh7y7DPu4zADoZkq20ixm+kt/wBuR49ZXdFrVwZlISbuKecsgb1ehBYxzZcq4HFhRowY5MCwu2pmXaRJFbVSkqhQHrf3MHrFFwi1BwQvlKwAcI9PMO+4vhS7eIzMoohzHxKPUeheFHYOZDQqDwWqg89M56+43sHEUcPzL5k3X18C/D/zPzX8zsvNO16oqBm3zS0pZT6BqHhi1ho5RVwvvxO86JamZcNVLjwjcVErdReDE5D6fN3rm+AL+ISrVEcrc2PDjuHMnZekJHQ3u4fxLL1Ndo7mFoQqgZ6+Bmce2/MWWzNVC7GcC2Vgna9UOjkQ97P5hPmCMK+I5TnT+swml8VVPKPaYEG2kZRZ/oR1Hki0cR5JmJ1Wd2teZel9jFbRKhX8yyHFvwNy6pQwq6rnHpOzHbwl0gqit1FLUWJDMHjn+0CudoAud11lIDgVoco0vGAB/Nw/pyrLjPSAu39BivWVdU41CA+Y8RCc16D7lL1pdwzcqjRpEZiQ4RW6/UcMQhEzMkz4i8UPmfMdg5vi+VRs8HZAIr6yv/QBXPhqCesfEj4GuDiDKpd7j4DEfMveOb587OxlC5ovUcl9JhqfZNLDHPLcsQOzPDp7IojS0a4C2ZshuW2jz1AdQDsccMMEIgsDbcOCUiuSICpqsampiYW1dOGsc4Q4IWSLa08pwfSwsjdQPFd9OkMewIq34E0ECggaca6xalqiCCO/AlvKeZ7BzfO4tSWS6kCc1lb2q2BoeTwn2LVRGhbOIq3TUbSWKmq1B15XSIKdwKceBBAj1Mu4T4XBUHhdanMRgQ+zAorvU5V/EVwEqcTX8xkEgKcAr+JmwCgAv09JWycmaNznxK8LVzjzPaOb/wAhGaSG6u+fpLTFbTx+JR8p/VDCfUp+pQCiLjT9QwGrowzvp0hpzWgcw+4lgCSTeKMHHc3pjUY94QDI9jF5iGVzTkS+GOHhcS4KX+CPXwkOy/MrsOL/AMrQogSr3+5bXNFDgnHfWUs3Bv8AAfU4RFAPX9oVm+116fpMFN79hSc+sACA10a/UtvG95VW3x6EWrTUDAVUWZ8AGyFKzQuzVEwLjG6p6gGPzb+YIjt3CM+wfAgYX9E81e02+BGpfm35Jpp0Cmg+aBa+ZP8AQT/UTZfKjufJFts25YpAF1SF1SNPTLE2x2bOb9RTnAzuAfS/Ajdclf482ju3KxNdxdmosBTVszUGXtC7A5w+SzqVdc73LGYCtXLEi3lFcoI8tBoOVk6fVG4ckka8cnjOGsMzCUTKjf8AwuZ5cYk2S77IQ8ecYX1epml4C9Ja3F8F2+nmWPT75YXXOltV6EztWxo6v2xFht2ZC38xjtkaYq+Y4tMcKge+WfAgp845HAM2/Sb1/sVZzuYEajOLlOCThKXDOZxkZR3AJQVxeHwrwfLRORC6OhHtmYIoQ+BOz9PNv7dy4BuLwMsKCtlOJxBPowT0t7itGueZ2bl30mNCrVvjE4qHozImxvcqL0WuMzv7zsmdkyq4/NP9Jn+kwTR+Wf7DOn+WYnD5fLfSXOP34823t3GTt6VfVMcDTolWQwDnXuq/UqZRshx0xW5YUFXI6tuEq5x9X+xTMFc64H6iS8OWt4mdXI47Ijex2+41Im6bapi3BZp9XHHdEwMo31wnLr+CVBoHmF++IuqW3Tolaldqba+dd5lYwUyiZ/EJBbY157lx4+Zv3PGHSWKNcUXolNHH36zDl1JyowU7hHX691DmbCjlzozOMgGvP+5qTo3w9JSlgwvdmf4hM8oJTlOBpAcWMfiWQKQPhAoOcGbhkfw/IIXgVcprv+pULS47AnfoTaUNC2LccoP0Foi/iLcFIiV2wZYODiDILik5a/cxrq2VqVpeap/0TW3buXAqViBZXHcB0XvEC7wWG0x6g12x5y2MTvjFhUNRZfNstIqjRuKYVqtJpRwNWUwyYBTaucwtRoBROENhrjt/EvhAUoDhqPMh6IBRCxUxKDpR4NPv6HxCATWK7VGg3K6BiVtFM6EuIlxTeOswjE1ogPTcU0fe2pcI7gLR3/l5jBv6Bg2tz+oY1Demu2CENFHgUZiFv2wt2H5S07MNhfFuVFNfCHHryUSlzgocs91AZCaVGV5nyvgcBROQ3AtiBdCBXa4Mgu0vHL4D3jO/3MHAx9PnCkx48qJTg3EmmehEo03dXJ9vzAXZbAbXcXUQ9DFkqs3iVVWcyLn2BQ+prw3HMOlBdc/qFJqPHZT9x0NI4qvk9pYxFRdUQMhfPEaC8yqHVYj6vdeVVfpynHemXp4PhbKz2BuKxRjJsYpehE/XwofXPTUelEVr/s7ny8y2iYCz7s7/APvwhMxYRnqr7ljC9x+4OZAwIKHo/cbKPdNT3Y8lztBOn8pt+1C39n6hlz8n6nqnKHx0oORDpQeTLNAyA+J6Cf52K2XrNq+W5Vn/ALl//9oADAMBAAIAAwAAABDzzzzzzzzzzzzzzzzzzzzzzzzzzzzTzTzTzzzzzzzyzzyyzyzzzzyHjsZRcYfDB3/BS8zyqxcHlDmgT7o0CX1zzBScztFXLN6YP0dfzyXZw/4TIaBBRD/+YzxMCzfPBYRcQ/8AH1c08RMEjbpTQiXU/Eg088Lk4d9EbPvm7ltDaw8A8VnN4P3dZRRFCV88elzYq8y48wKR6RY08w9jEhj7LwBQ9gDf888vcfv/ALLzDz/BzvvPPHDLLPDPPLHDDHDHPPPPPPPPPPPPPPPHPPPPPOPNOOOPMNNMNMP/xAApEQEAAgECBQIHAQEAAAAAAAABABEhMVEQIEFhcYHRUJGhscHh8TDw/9oACAEDAQE/EPilpBqWaTlSipb1nfnfhuTuTuwv1ibTEMXOjYXrHu5Cv2RoQihChREjEBnCswwouBQwcKjlmXiO+QG1EXMENsG5eZeSYWuIuZZYYLRajCqblS4lxOkHI6vEI5oRNG8JsRU2QQMXg8nq8ljMLMNbf2UvPyv3LPa/cHAR48bzqRvT9y6AkDeNaOX1ZXJRaH0gdLfT2h/A9oFp9D2gKx6309oKA3bcWEqxd9DB6+3iAYyOLKU/Ixeo49Z39B+fJ5HRDqstNY7kSMsxYY8CVElPVDRjtYPVW/KPy6bXACjkxdJ3Z3YMDb5qah9cegMZ+j1v8zufedz7zafvK/8AMIErkAZMrPXCcOLhRUZYEANCGcwsxK2gMqaOICpiZdIWNOAK7pUMs8od5K4BBxURWOQWtnagP+IG4UlJSAKPiv8A/8QAKBEAAgECBgEEAgMAAAAAAAAAAAERITEQQVFhkaFxgcHR8CDxULHh/9oACAECAQE/EP5Sl5mXEC+7DQSnQgy8D0/Bt+B6Xgek4Gq6cEKzggAoE5TAnUODI/BASFH4Vc6bYg7hy56GlgShKus2KeTljuNNPQUWdP2MeQIlMcoYuQshEQhKsISLjyvhe+KMWRZCUDOOYfwMKKkX5ItS0MiKvuJ0wowDjEMmAT5UEBXUdZjSsaL3x6uLcISwRf7sIjNz7rDW8UiSSN/0KpGQ0qLTsYaSzKmBEr9Fj0fwblDRWQ4+BxwjBWQTJlRuUPsWuQMViNiY8+lYtw4Ti7yqdpHkdB/ZC19CG7cf6ISWRekpJJg3BQjVWmNDuZDpk7j5ImlGehOhrJe0+/AnCSs/n4Qoiap4e/3cRAxkC4phodaKX2gpSWR/TirprIh6dkfsEVU7Dh/oby9hzuuyHp2OYs+RJt1Ueok+vBskq9GKtTBPYlFl2OTol2OahpdjphJdnguxPouxtFl2JKooeklxUcrU2EtjP6cZPGUshsm7QK2XAznIuNCYkpzcG44FLJkjDW2oXnmRb8YpjqI3Ohuz6N/o3ejfN/o3FwN+a4PCeA8B4zw/ywD/xAApEAEAAgICAQMEAwEAAwAAAAABABEhMUFRYXGBkRChsfAgwdHhMHDx/9oACAEBAAE/EP8A2cvAFG4tHHpAUqI0OH3ijgT3I0wvU/1HH3Ef3EaEoQN6u6jI4r+CYpY+VBgDHzsggP8AY1/MAu19VCaoa8swPJ9/MOGL1T+kVr0UH+xQ1M3cjiUrvsP+MCycbtD9ephxb+vELeH9eIi03ftxEVWHk3fEVjJI5hHn/KX5o/TiF04wpRyev8hbDsnUWqlKS+TUrbrYT/jMfSAlb0LIUTvWW0MvJkT/AJGtfSNBySms8VcecRVn1A3HG4rLifQqwTRH5KHUpOGCSDV0KUZ4yxj2XvULprUbLeaWgO1fb8RSOmxoiWlleRPCJH2L7hGIrLHhbohEaVklnurUKotufRPx/J40KtuvMZRFgD9GJNapSkoduL9vMu8Us5oB+6S30Pyikaw3GDAA4po2I8sD8i/sm9lFVKqioUAuXbRiHfIfQa7L6VDin1dGR0bCthTZf3jtRkoql5Ea2PslKGzLU77lkYyI7I7DZp2qpPIRXgpXaurv8ROqxaPgh9oaG2Y8e3J62+kSYidgBIJeosJRBsTtmlNRgXkrVOSuTmA+ah1aSrtVK+eJVubpiomFPeWgvvFFORlejTZhBiqBgP5Gs7eOV37EUsRsmX6XX2mmJRL+A69WiMOZTZb912s/ed4scxDpw0BQvYZZmpAbaUfm0CeCqqRYeLR8QOZL7L1hv1f5JgEars+n8Ok8IGaDcG1Z+APaIqu5uYDAxXvAzUW5jOQUXTXlgmlLHah/EdNdYnGKznUZEy8wVGczZbI/DyiB45lQp/uW03yNmH1+fqGxMJEf33U0pZDS+riKpLlW4vkn6Tv9Nn6/qR93+9ix7oPeNLOdDVTtwNesqsbfQCq0J96/JFg4wOwP+yzE6TaiWHD/AFLbPgL1Fmed6jqvrAXLyaMk+PsZZPLCy4FFSGM9Twp4mW6JaLQlICkgg7xuxKOWhjNpvV1q3VkyBiX2vPTHBcprtw8hV4gGWjqVrD7/APIwF7EUFB7khx0g2am+TEQzMA9Qh1Mcwxbwtif8YKxVynUXyMBtSlUvTCYkQpE0jBB2JC/NdZ9H2hAJqbwFqK89T7/+EyejtDtev+SvosH34o/Et53QuMA1hffrLIqEDIYpZzHrhmQ6Sd9JkhvxF8GqP2jHpZ+VFajqrWsZ8SjwhabstE9IvS9J6FUvachC3lmWyJro4jh0TJczTkwlvB69v5YRPPErLE39HxBqIpNgB6fRGr4UAG1lzARgpgBzHMwKiWAqybfQubDLrkzMRgKOTzG2PaNWY+m5fZNmEUhquP6D+Xqo5gZcY/WgRYhXsgAQLQUWF6qnWahY1wwJDyDBbK7gM1sK2lGsWw7F6gBOJFUCjgNtZxLAJBAlCwALVNZEjwHBKM0KjLesFziZZXYALsRyYjInLwK0Fh7OJdc4pmGGV0O2FmeN81AzBVArcTpVtAL1qvXEpltpi3tV0hcjAELFFFFtrRCJLbZQBF40riby4gFYsSKPp1BlKv1gzTO4P6n8kzNal3qMuGY4jWgG6TJGzOOVYtceZe3TFe4IKMuklTCkQqtWazjGb57nEJ4ErRrYvio0hXhvwFUBWqqBzaB5zuzSNuNSsCKRUaYAc+IdgEaFaDrGVcVAbFDeKwrbOLrMeNYXRmlBLL3ULpIVmG/FVtWpUk5DIor3i3zKBinlBJVVVK1mF5SsTK6AHCYImvMoStPKy3JlHFp7xnuC3GqwBkedfyeK/D1NbhFYZlM5iZhjUHEOOeUGxQw4ZdZgAJN0fbGTnDqV+FAg5qr7j5hGalWqy7DXYfhgoqBestP7HyRNu0Sy2FYcKWZ6WFdY1jlFyFD4HZRgpBs5iy8TRtbVpiqbzxEGlJYhyFWCs28QClYAHxezGx3FaH5lAK0Q4hiZTju0LkGJuh3NodwsUJrjf8sC8RRIEvM4uLGL9HWNyhFNFIWq8OmPWZsICWWqN7FvHiE6WAEyKuejCVES0A+/MDhuPcQ9/oy2oqBKwAHoC1TAwQdYAUVnikvBC3mBim7bTCVUzwrzFqgX0vvGK2guaFTfTLfPeUsultXf2Z1is0QQUo8RSWQf7j1+ILd9K4PdMoRMh8/J5guUgR+hiIENOFvldfX3+rojktIlXEXHay4iqMwb9JeIfRcQ3GE2geZpv7sLovo/9mrv6dzDR+55i+/1vMYtfr/pH/zEwKSIOs2wTa5m/MCPOSOImwGm94ozxLpn0JkguzLS16wc1kAQAcbNm+53XHv9MVFQref+v5OxAsz87nRMwDzbmn7QcDqlQBYfKEqsjQDDgWN0nrKUVQxyVXkxVV5jxQRCFxhw+GV1nHLQbQ7VoLlZTLArSsxfuRbfqGAjdXv2hFkpmaUWWldVEigi3QqwDqyAI1wR2p0wnEuF8xYtMXEKMozwVGxzHLRLGFTa1SkUj1If/URoNNL4L+8C7oRe44+D1o6ivtzCMINJPz/IKSfkZhVIZ4MWA7Kh8s0KQBrg3ytfmJf3fAwIXgWQICybRzbwuriD2BayWKKgrLVxObishNUyKe+KjwMOuSZFug7cwGC1TqK3IfFXfjMNKYumUpThdvtKfEi2ICnIW6rUQEHyxjbbe3zC0DQxVnDXErMwO41LLGVM/RsOJbpA6zSqZYzEDb14ggFbyxvsiYFL1Z/JS3mRMF5BYFq51RCIvUQssl5juqQOQwljuCtIC8MDvcyg20UpfV3EXVB0f9QUphLsf+/D8RNY1sISu9wgohi6c1ffUGoFAAY3q8ylrUCzc2VfkiAwl3xXBbz1D/o/6n/0f9Ryyeh/1Gr9D5jX+h8xClvj/SP6x+Z+yf3FQBUw6PvFgy2XmZaVwQ7gsBsP5ArXIKZXHiwdPAl9XBiiY2LBn2XcMjorq7EL6+zLFOpUyqXQtm7wPpHNrNRcBqrCq9q4OopXOZRLQxkpz3R1EHZIhXK4PVF/5HljBusB+vMvwQvSAYXdaqAaFyAor3vqIQl6DdFK1VYc/DxBkIS2Jug22l+fkm3J5TqnPjeXopB9PhSraGjy+xUaRcQKllWt+3WQjUGlh4RTFpy1WIMScUo1d0z8757YDdIAgb377z6vcrBssFEKxQVqXBjmMVi1iW4mEvM5/AfyYq3IGB46Cgdp4L3THW66CqVl5UMPZC+QBm1AxeNbaNvMudFeaYN42zxq2qibEj12D8gCuGBNBU2NLlL3bxfeGKxIqV5pN4y0nWIkxQOgbewt7zWo+FPSGIG84/IRBmottx8saZ1mGaqwRBzbuqLT3XU1ams6FomeMwLahpULVEvPo+OyWDbATNtxzkTf43l6W2MhGTZnOeiY41NlGA1o3kqqPUmOK8u4eMu8dh1TTRsVhNjgM6+z0w0QKNhoa+E+TuLp0+ZVLJ1hmGQdbDL1EXar0ounMYtRuXNRtJ5Pj6V/B1qtuYe2mF0pd19pyTj1TTDjEVXCMUC2xm7/ADCItatTR1rxKAaJBaLy48srpLaIBvezm4+USJDAiONaWHWYUBvAZE6D4jZ41Qlr3Wl4mYILbWzrWf8AMRWKwQUZMVmmBghA34tu9GzAQOLhXxW6CtYKvqYOaXnNVkccNGKh6DBhFXlV4Q28HUSiIqq5d7PMq9zVq11YFa/Pc5B0iFaQp6nB2RpSCmAApxdUDEcf0NFjWPB8TOXaERb6BwB6B1HtGR3gZYOjpXrFQpCMKFYBdrx4gDhCVCxVl24NbYG+pKqXjbHWPd38jtV3/tCTCB34wXi75zlOMlddOskBO9IGKeQSy3VafMJ+vdhCoqqIpywoKajWSMGgpXyQ5sUwtLLBLxCzjRqylhnbV44qPbGzQKjTTosp26gmx9AaTXhninzMi0gSoECOSbR+l/ToRwwUBrLQlgzmq95Vb8MNAJ4bbGxiyB024leFwWLukNdszyCB+KiCeS/kK/sbgywYVk32YcpZwvcf+MEBi4vGKwYrUSGNK0Dkp45N9ud5gr3JhBLETODrWUxMG43k2aeTTR0QnMBeAhQ+oRXRyaZaS35YNxIFpxrKcLZ05MxUVgwAHgAcxybuC8ZhXqmr8IjTbfZ8mWMZBgLueN98V5lYcBCjI4c4H/YagCt72jd97K9JdE5M1TjTaL8HMAYGzcbLWnafEspBaCunw4c3d1i7juNFa3C3Pm/qYvqdoiUcjVWdb5lt4lIGK8gzL4xFX88wJQAJRQMNE2p87tU2W0Kp9I/Q/gL+mrwkiuygeY+d8RjtJeZguFiHFnAjD2o8e0PTPUpT65gz4Qhj7xmqOcAfl9oKoSrUUX0ZnSVXZav4gGvbL/kUStazRy9rmej31X4gotlyloPWs/ESCiXVvyQoVFasrhe1+q/mo0wfP/kOrTt/kQrD/D7RJkvX/iX3Y/l9pxG/fiJDOd//ADB1T44/5ibWDcQ3H6wzmT4P6JeoiGbTLYY8y/pf/tF/hz/5X+HP/h//2Q==";
    public String buscapina="";
    public String arcoxia = "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W8+Kr8+asZVUlkEFTkiHNfkUo463P4e5UEGAgEHDpNa6L3DEB6PmhYYq9GaOjEtsEeWFnL4weLJL9gsEzpiOtADWqx9Rm6dGlSslM1/gDVlSj3lSpfbY8HR4ckBsveU03U+sNmlUVGMwfmCgsWhpbFzaRNjlMygLWVVzW266iavgzOMuM4SklIUwePN6hNmv1tLtxStrGIxBlfkKlfAmRuk17epYBXhNNcToP7YXNEKCdEStwPEOJLz2lZTjzki3GhaVtOffLwKm+VZvfUQVjkjoLxF3e20vFIQamNGY1QL8QdIbLnRBSnMrx8piABdKd/FS5pPwkcQtYvqP2wjlIdSiXVOSoLiXntKSnH8AMiciJuaQyoPiWh28VH8ijj/Jv//aAAwDAQACAAMAAAAQ888888888888888888888888888888888888888888888888880843z3pQ387w2ya2wYUwTrQ7qJlFHcfAtVtJ8d+CRtlWbqDHNs3j+Bk/F9mzQlNBBxwpRg57VhlRJx9AcxlWv82MFVV9R8/LVX2Ms9SVxpQINcs88888M4MMs888888888888888888888888888888888888888888888888888888//EACYRAAMAAgECBAcAAAAAAAAAAAABESExIBCBQVGR8DBQYGFxscH/2gAIAQMBAT8Q+aQhCE6J0RCEJ0pSlHA1Q0TwiCopwxkVtKpa28+QjuqfNbURUTkJWoXWJUTTW/v6ihgSLyDKMiUmY+X5FxvFcGVQSSwiyw2YBjJBjV8HJENDd4iOVmpp7/pln20Xw5eGme/RV9hTScx/Xnuo+4hoZbEkSLpGF5VKSvN5WfQf/8QAIBEAAwACAgEFAAAAAAAAAAAAAAERECEgMTBBUFFgYf/aAAgBAgEBPxD3SlKXJVhlZWUuIRkILCjqNTLHcfQ3ahrk02QfkWafBy12PYhOC1iVEFh2WfQReTbG4sfMUZBROrxE72RcCao+aihpUsq8LLhKoagup9J//8QAKRABAAIBAwQCAgIDAQEAAAAAAQARITFBURBhcYGRobHB0eEgQHAw8P/aAAgBAQABPxD/AKS64PLP2RmeofUw/wCgoaoTVh9zVvTA6N8Kbheqhmp7Ztg8sbojxaJauMESr5dTKtK5TEaX0ZhkMJLW6O1xtXgj/UMyHlT4h9Pmfxn5+SSt96H8y8FnTS/7nNPAwenojdbzRF9A8w6QPliPxIeHdo64wFm1e7KLovDdwVoMaFXfoirtr3mKqQEtvieZ3ibJ8wQtA7xG49S5yBKN6V7L5ZQVTxK9a9sEoAnIPqUq3M/Kmp4lJEAasd4HyIzGgV7h2w+yswUVXzE3C85f3ATNnNRBpscTULO7cK8x3VV3SHMwHVvgmN1+Y7y+oKsltsRfMe6DGQBjmL7h6iK8CP2o2AwOwh7TX2OjzFxH8hPyJqeITDhdveyCWBVobsHh1Jl0B2gDb7gho/Et2jbXP+AegwuIzM9wY/mlzFdPyjOxG3gb6D5J+ZNTxEphgDhjMJUmyZWuR5kUCCslzhqARq6YBp75iJglHYNZdiAQqjNs77eI9kHUUSh3rJMYcV2DDjGK2xbEJVEkLFwwEYovEXMWXiXL6aYDu1E2rnjL8SifBM/NRoXsKn6n2oHYEIqEsviDdD0TeL9QZbPliRYtwxUQSiAYz9k1PEVrgjuf/GKy4qVrDjA0+wTVA0XzpHInW4ORwx1BzUjiqJgIM6RSukPgbBsREPhKAlL15+ggPKkNDgDaXafMv6l2afej9yxx5i/gmXaq3r5lup8V+ku/PX7mgr0hjTB0CUVqloitO15mKa4MDoKl7BDfhja2y00vKfSYQwFm2YUEgCOEd47D4hQAxqsvWriIuGzLU007Spm9eoutmrp1ZRPlGfiXO6WiW4LZZRd4oRel8X3qUCill8MlZqacx1N/8M2E2u0umsQx7RPUhsvaO0FK4bbc0UKKbZ5ldalTeVHZV0VkytSUtd8byxIrwEUr4Daa/aXGaBmj5T6DH0mBmNa/jqAANoRi72MNm+ZrVTK94VaCsFpYlBV32gGSTSeHAtVfFwZNH1EKTopt7iTgbmSCutAB33hTa6QYILhoc8wWgkhvCgbalkdtUUkWJZqtWtav+FdK6Y2c5VxxxcvBK4fLuyoCjVaCYpZ359zR8p9djVVOQ5O3QYN+RJlaBpB8tU0zKHy+ByM3PRwusaxRrQBdejjGniDMTBKTDR38FTECkwDSlmHQlR6VK6VKnAK+5UyzVfXSsRAHRKlbwjl4ikABze8qDuz67CydK6e0GGJFs2uldWNjN8HtNgqzQeAgh2CjszCRGLyY1nuQP8AlSpUrpUqBGC2XAqpO8oFqmnMXcLzmL4eCMQtbzKoIfkmh5Z9FhQttQVsL+Y83SOghtcZglSMi276jTwtUpvxtHpUqVK6VKlZlSulYlT5LovXbKFGZTOTg8xJbVzc0fLPrsxJ8iNEHyQUdykW+hhObuCCCCdKlSoEqVKlSo1aUX1qrO7Li3gDelbH8RJGqKLviopatBtGulXqd581KzKA6mjxG/RckW0ji8wQBANiG/bAgCASss+2hTRedrubmkRSa5JoCswQ112ug8s0tZHeJAlSpUqHQqVKl0xdkEVttqfcaikkFfQ72P1L10u2uB1fhmDKmXGnBvLAsYHlE/pg+tEOX0hv2wHZADQrp9dljDaVlwc4zXNRDRTbyxEgoJjWkpK90P5RexS2ByA0PaZoLRaIMaoMh+mMxM1CaLk9/1L8miq2i1QeWIha7BvRqVKlSpUsriWJlOLg273N0hDcTAf5QA0A/8EsR0ZkczjeUoUboVb3iRKVcgOFh02zW5wTBNXReI5patdGl/wBREUagxpO7cpQAGG5Zgl9Vd41dHJVYjRfEH1A9w5/CA62wHQf6A2t33im52YcS/diyUNGMTLARO6G8hBNUwLa/MA0A9f7CzaL5qVWn/TP/2Q==";

    private List<ListMedicamentoShow> listMedicamentoShows;
    private List<ListCompraUsuario> listCompraUsuarios;
    private List<ListFarmaciaPrecDist> elementMedicines;
    private ListFarmaciaPrecDistAdapter listFarmaciaPrecDistAdapter;
    private RecyclerView recyclerView;

    private View rootView;
    private MapView mapView;
    private GoogleMap mMap;
    private FloatingActionButton fab;

    private LocationManager locationManager;
    private Location currentLocation;

    private Marker marker;
    private CameraPosition camara;
    Fragment currentFragment;

    // TODO: Rename parameter arguments, choose names that match
    // the fragment initialization parameters, e.g. ARG_ITEM_NUMBER
    private static final String ARG_PARAM1 = "param1";
    private static final String ARG_PARAM2 = "param2";

    // TODO: Rename and change types of parameters
    private String mParam1;
    private String mParam2;

    public MapOffer2() {
        // Required empty public constructor
    }

    /**
     * Use this factory method to create a new instance of
     * this fragment using the provided parameters.
     *
     * @param param1 Parameter 1.
     * @param param2 Parameter 2.
     * @return A new instance of fragment map_offer2.
     */
    // TODO: Rename and change types and number of parameters
    public static MapOffer2 newInstance(String param1, String param2) {
        MapOffer2 fragment = new MapOffer2();
        Bundle args = new Bundle();
        args.putString(ARG_PARAM1, param1);
        args.putString(ARG_PARAM2, param2);
        fragment.setArguments(args);
        return fragment;
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        if (getArguments() != null) {
            mParam1 = getArguments().getString(ARG_PARAM1);
            mParam2 = getArguments().getString(ARG_PARAM2);
        }
    }
    @Override
    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);

        mapView = (MapView) rootView.findViewById(R.id.mapf);
        if (mapView != null) {
            mapView.onCreate(null);
            mapView.onResume();
            mapView.getMapAsync(this);
        }
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        // Inflate the layout for this fragment
        rootView = inflater.inflate(R.layout.fragment_map_offer2, container, false);

        fab = rootView.findViewById(R.id.fload);
        container.clearDisappearingChildren();

        elementMedicines = new ArrayList<>();
        listCompraUsuarios = new ArrayList<>();
        listMedicamentoShows = new ArrayList<>();
        cargarFarmacias();
        cargarListaUsuario();

        fab.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                //Toast.makeText(getContext(), "Atras " , Toast.LENGTH_SHORT).show();
                currentFragment = new MedicineFragment();
                changeOnFragment(currentFragment);
            }
        });
        return rootView;
    }

    @Override
    public void onLocationChanged(@NonNull Location location) {

    }

    @Override
    public void onClick(View v) {

    }

    @Override
    public void onMapReady(@NonNull GoogleMap googleMap) {
        mMap = googleMap;
        locationManager = (LocationManager) getContext().getSystemService(Context.LOCATION_SERVICE);

        if (ActivityCompat.checkSelfPermission(getContext(), Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED &&
                ActivityCompat.checkSelfPermission(getContext(), Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {

            return;
        }

        mMap.setMyLocationEnabled(true);
        mMap.getUiSettings().setMyLocationButtonEnabled(true);

        locationManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, 1000, 0,  this);
        locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 1000, 0, this);

        Location location = locationManager.getLastKnownLocation(locationManager.GPS_PROVIDER);
        if (location == null){
            location = locationManager.getLastKnownLocation(locationManager.NETWORK_PROVIDER);
        }
        currentLocation = location;

        zoomToLocation(currentLocation);

        int height = 100;
        int width = 100;

        BitmapDrawable bitmapdraw = (BitmapDrawable)getResources().getDrawable(R.drawable.icfarmacia);
        Bitmap b = bitmapdraw.getBitmap();
        Bitmap smallMarker = Bitmap.createScaledBitmap(b, width, height, false);

        BitmapDrawable bitmapdraw1 = (BitmapDrawable)getResources().getDrawable(R.drawable.icfarmacia);
        b = bitmapdraw1.getBitmap();
        Bitmap smallMarker1 = Bitmap.createScaledBitmap(b, width, height, false);


        LatLng miUbicacion = new LatLng(currentLocation.getLatitude(), currentLocation.getLongitude());
        mMap.addMarker(new MarkerOptions().position(miUbicacion).title("Ubicación actual"));
        mMap.moveCamera(CameraUpdateFactory.newLatLng(miUbicacion));
        CameraPosition cameraPosition = new CameraPosition.Builder()
                .target(miUbicacion)
                .zoom(15)
                .bearing(90)
                .tilt(45)
                .build();
        mMap.animateCamera(CameraUpdateFactory.newCameraPosition(cameraPosition));

        LatLng farma = new LatLng(location.getLatitude()-0.00192, location.getLongitude()+0.003);
        LatLng farma1 = new LatLng(location.getLatitude()+0.00291, location.getLongitude()+0.0028);
        LatLng farma2 = new LatLng(location.getLatitude()+0.00392, location.getLongitude()-0.00112);
        LatLng farma3 = new LatLng(location.getLatitude()+0.00234, location.getLongitude()-0.0049);
        LatLng farma4 = new LatLng(location.getLatitude()+0.00000003, location.getLongitude()-0.0043);

        mMap.addMarker(new MarkerOptions()
                .position(farma)
                .title("Farmacia Ahora")
                .snippet("Precio: 100.00 "+"\n"+" Tiempo de Entrega: 30 min")
                .icon(BitmapDescriptorFactory.fromBitmap(smallMarker))
        );

        mMap.addMarker(new MarkerOptions()
                .position(farma4)
                .title("Farmacia Esp")
                .snippet("Precio: 60.00 "+"\n"+"Tiempo de Entrega: 55 min")
                .icon(BitmapDescriptorFactory.fromBitmap(smallMarker1)));


        mMap.setInfoWindowAdapter(new GoogleMap.InfoWindowAdapter() {

            @Override
            public View getInfoWindow(Marker arg0) {
                return null;
            }

            @Override
            public View getInfoContents(Marker marker) {

                LinearLayout info = new LinearLayout(getContext());
                info.setOrientation(LinearLayout.VERTICAL);

                TextView title = new TextView(getContext());
                title.setTypeface(null, Typeface.BOLD);
                title.setText(marker.getTitle());

                TextView snippet = new TextView(getContext());
                snippet.setText(marker.getSnippet());

                info.addView(title);
                info.addView(snippet);

                return info;
            }
        });
        /*mMap.setOnInfoWindowClickListener(new GoogleMap.OnInfoWindowClickListener() {
            @Override
            public void onInfoWindowClick(Marker arg0) {
                // TODO Auto-generated method stub
                String titulo = arg0.getTitle();

                ComunMethod.showSuccessDialogShow(titulo,listCompraUsuarios, getActivity());

            }

        });*/
    }

    private void zoomToLocation(Location location){
        camara = new CameraPosition.Builder()
                .target(new LatLng(location.getLatitude(), location.getLongitude()))
                .zoom(15)
                .bearing(0)
                .tilt(30)
                .build();
        mMap.animateCamera(CameraUpdateFactory.newCameraPosition(camara));
    }

    //Cambiar de frame desde otro frame
    private void changeOnFragment(Fragment fragment){
        FragmentTransaction transaction = getActivity().getSupportFragmentManager().beginTransaction();
        transaction.replace(R.id.frame_layout, fragment);
        transaction.commit();
    }
    public void toggleBottomSheet(){

        View view = getLayoutInflater().inflate(R.layout.bottomsheet_layout, null);
        recyclerView = view.findViewById(R.id.recyclerView_bootomshet);

        BottomSheetDialog dialog = new BottomSheetDialog(getActivity());
        //Button btnPago = view.findViewById(R.id.shetbotompagar);


        /*btnPago.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                ComunMethod.showSuccessDialogShow("Farmacia Ahora",listCompraUsuarios, getActivity());
            }
        });*/

        showList();
        dialog.setContentView(view);
        dialog.show();
    }
    private void showList(){
        listFarmaciaPrecDistAdapter = new ListFarmaciaPrecDistAdapter(elementMedicines, getContext());
        LinearLayoutManager li = new LinearLayoutManager(getContext());
        li.setOrientation(LinearLayoutManager.VERTICAL);

        recyclerView.setHasFixedSize(true);
        recyclerView.setLayoutManager(li);
        recyclerView.setAdapter(listFarmaciaPrecDistAdapter);
    }
    private void cargarFarmacias(){
        elementMedicines.add(new ListFarmaciaPrecDist("Farmacia Ahora", "180.00", "1km"));
        elementMedicines.add(new ListFarmaciaPrecDist("Framacia Esp", "166.30", "2km"));
    }
    private void cargarListaUsuario(){

        CargarMedicamentos();

        listCompraUsuarios.add(new ListCompraUsuario("Farmacia Ahora", "555-551-2453","Calle el Empleado #152 -A1, col.Vicente","180.00","180.00","1km",listMedicamentoShows));
        listCompraUsuarios.add(new ListCompraUsuario("Farmacia Esp", "555-652-7845","Av. Insurgentes Sur #458 -1, Tlalpan","166.30","166.30","2km",listMedicamentoShows ));
    }

    private void CargarMedicamentos(){
        listMedicamentoShows.add(new ListMedicamentoShow("Pirquet","Adulto","Fexofenadina","Tabletas","180 mg","10 Tabletas(1 caja)","209.50",pirquet, ""));
        listMedicamentoShows.add(new ListMedicamentoShow("Buscapina","Adulto","Hioscina/Metamizol","Tabletas","10 mg/250 mg","24 Tabletas","358.00",buscapina, ""));
        listMedicamentoShows.add(new ListMedicamentoShow("Arcoxia","Adulto","Etoricoxib","Tabletas","90 mg","28 Tabletas","1829.00",arcoxia, ""));
        //listMedicamentoShows.add(new ListMedicamentoShow("Colchicina Aurax","Adulto","Colchicina","Tabletas","1 mg","30 Tabletas","51.50"));
        //listMedicamentoShows.add(new ListMedicamentoShow("Melatonina Aurax","Adulto","Melatonina","Tabletas","5 mg","20 Tabletas","144.00"));
    }
}